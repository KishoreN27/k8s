*********RUN THIS COMMAND TO MASTER, SALVE1 AND SLAVE2 USING SHELL SCRIPT*********
#!/bin/bash

sudo swapoff -a

rm -rfv /swap.img

sudo apt update

sudo apt upgrade -y

cat << EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

lsmod | grep overlay
lsmod | grep br_netfilter


 cat << EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo install -m 0755 -d /etc/apt/keyrings

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

sudo chmod a+r /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  
sudo apt-get update

sudo apt-get install -y ca-certificates curl gnupg containerd.io

containerd config default | tee /etc/containerd/config.toml


sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

systemctl daemon-reload
systemctl enable containerd.service 
systemctl restart containerd.service

sudo apt-get install -y apt-transport-https ca-certificates curl net-tools wget vim bash-completion tcpdump


keyring_file="/etc/apt/keyrings/kubernetes-apt-keyring.gpg"

# Check if the file exists
if [ -e "$keyring_file" ]; then
    echo "The file $keyring_file already exists. Skipping the command."
else
    # Download and install the Kubernetes GPG key
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o "$keyring_file"
fi


 #curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
 
 echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
 
 sudo apt-get update


 apt-get install -y kubelet kubeadm kubectl
 apt-mark hold kubelet kubeadm kubectl
 
 
systemctl enable kubelet.service 
systemctl restart kubelet.service 
 
kubeadm config images list
kubeadm config images pull

sudo ufw disable

echo 1 > /proc/sys/net/ipv4/ip_forward

sudo sysctl -p

*****AFTER THAT RUN IN MASTER****
kubeadm init --pod-network-cidr=10.244.0.0/16

********IN MASTER WE GET THIS OUTPUT*******

kubeadm init --pod-network-cidr=10.244.0.0/16

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.34.180:6443 --token 5tkjaz.q84s6a0tnjw8ows5 \
        --discovery-token-ca-cert-hash sha256:d896052810be12151691082fcdec6a617640042679b776dc6a827a4deee6ece5

*****IN MASTER ADD THIS BELOW COMMAND****

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

export KUBECONFIG=/etc/kubernetes/admin.conf

*****AFTER THAT IN TWO SLAVE EXECUTE THE BELOW COMMAND TO JOIN***

kubeadm join 172.31.34.180:6443 --token 5tkjaz.q84s6a0tnjw8ows5 \
        --discovery-token-ca-cert-hash sha256:d896052810be12151691082fcdec6a617640042679b776dc6a827a4deee6ece5

****THEN TO ACTIVE THE POD USE BELOW COMMAND IN MASTER****

wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

kubectl create -f  kube-flannel.yml





